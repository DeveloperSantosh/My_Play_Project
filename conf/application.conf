# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

# Default database configuration using MySQL database engine
# Connect to playdb as playdbuser
db{
  default{
    driver = com.mysql.cj.jdbc.Driver
    url = "jdbc:mysql://localhost:3306/NewDB"
    username = "root"
    password = "root"
    logSql = true
  }
}

# liquibase configuration
liquibase{
  enabled = true
  changelog = "classpath:liquibase/changelog-master.xml"
  driver = "com.mysql.cj.jdbc.Driver"
  url = "jdbc:mysql://localhost:3306/NewDB"
  username = "root"
  password = "root"
}

#For Session
user.inactivity.max=7200000 #Two Hours

# Session configuration
play.http.session = {

  # The cookie name
  cookieName = "PLAY_SESSION"

  # Whether the secure attribute of the cookie should be set to true
  secure = false

  # The max age to set on the cookie.
  # If null, the cookie expires when the user closes their browser.
  # An important thing to note, this only sets when the browser will discard the cookie.
  maxAge = 7200000

  # Whether the HTTP only attribute of the cookie should be set to true
  httpOnly = true

  # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
  sameSite = null

  # The domain to set on the session cookie
  # If null, does not set a domain on the session cookie.
  domain = null

  # The session path
  # Must start with /.
  path = ${play.http.context}

  jwt {
    # The JWT signature algorithm to use on the session cookie
    # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
    signatureAlgorithm = "HS256"

    # The time after which the session is automatically invalidated.
    # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
    expiresAfter = ${play.http.session.maxAge}

    # The amount of clock skew to accept between servers when performing date checks
    # If you have NTP or roughtime synchronizing between servers, you can enhance
    # security by tightening this value.
    clockSkew = 5 minutes

    # The claim key under which all user data is stored in the JWT.
    dataClaim = "data"
  }
}

play {
  crypto {
    secret="OrEe0;8u>2rqDR0C_Z`iBq`30Tipl64Fi=wC;q[]F;TGCMWQQ9makVx8:p>XuTYh"
  }
  # security modules
  modules {
    enabled += "be.objectify.deadbolt.java.DeadboltModule",
    enabled += "modules.CustomDeadboltHook"
  }
  # For handling http errors
  http{
    errorHandler = "exception.ErrorHandler"
    session{
      maxAge = 7200000
    }
  }

}

# Deadbolt configuration
deadbolt {
  java {
    # cache-user is set to false, otherwise it's not possible to mix deadbolt handler that do and don't have users in the template examples
    cache-user=false
  }
  handler=security.MyDeadboltHandler
}

my-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

# db connections = ((physical_core_count * 2) + effective_spindle_count)
fixedConnectionPool = 9

database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}